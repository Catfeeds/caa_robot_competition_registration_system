package com.zts.robot.util;
import java.io.File;
import java.util.HashMap;
import java.util.Map;
import java.util.Set;
import java.util.Map.Entry;

import com.sun.star.beans.PropertyValue;
import com.sun.star.bridge.oleautomation.Date;
import com.sun.star.frame.XComponentLoader;
import com.sun.star.frame.XDesktop;
import com.sun.star.frame.XStorable;
import com.sun.star.lang.XComponent;
import com.sun.star.lang.XMultiComponentFactory;
import com.sun.star.text.XTextDocument;
import com.sun.star.uno.UnoRuntime;
import com.sun.star.uno.XComponentContext;
import com.sun.star.util.XReplaceDescriptor;
import com.sun.star.util.XReplaceable;

import ooo.connector.BootstrapSocketConnector;

public class MailMergeExample {

	public static void main(String[] args) throws Exception
	{
		Map<String, String> dataParamMap = new HashMap<String, String>();
		dataParamMap.put("编号", "R20171700001");
		dataParamMap.put("学校", "平谷三中");
		dataParamMap.put("队伍", "终结小队");
		dataParamMap.put("大项", "足球机器人");
		dataParamMap.put("小项", "足球4V4");
		dataParamMap.put("奖杯", "冠  军");
		dataParamMap.put("教师", "秦志鹏");
		dataParamMap.put("队员", "兆国，陈野，金鑫");
		String wordModelPath = "C:/projects/奖杯模板.docx";
		String savePdfPath = "C:/projects/奖杯3.pdf";
		
	// Initialise
	String oooExeFolder = "D:\\Program Files (x86)\\LibreOffice 5\\program";
	XComponentContext xContext = BootstrapSocketConnector.bootstrap(oooExeFolder);
	XMultiComponentFactory xMCF = xContext.getServiceManager();
	
	Object oDesktop = xMCF.createInstanceWithContext(
	     "com.sun.star.frame.Desktop", xContext);
	
	XDesktop xDesktop = (XDesktop) UnoRuntime.queryInterface(
	     XDesktop.class, oDesktop);

	// Load the Document
	
	if (!new File(wordModelPath).canRead()) {
		throw new RuntimeException("未能加载模板！模板有问题！:" + new File(wordModelPath));
	}
	if(new File(savePdfPath).canRead()){
		throw new RuntimeException("已存在生成的文件:" + new File(savePdfPath));
	}
	XComponentLoader xCompLoader = (XComponentLoader) UnoRuntime
		.queryInterface(com.sun.star.frame.XComponentLoader.class, xDesktop);
	
	PropertyValue[] propertyValues = new PropertyValue[0];
	
	propertyValues = new PropertyValue[1];
	propertyValues[0] = new PropertyValue();
	propertyValues[0].Name = "Hidden";
	propertyValues[0].Value = new Boolean(true);
	
	XComponent xComp = xCompLoader.loadComponentFromURL(
		"file:///"+wordModelPath, "_blank", 0, propertyValues);

	
	// Manipulate
	XReplaceDescriptor xReplaceDescr = null;
	XReplaceable xReplaceable = null;

	XTextDocument xTextDocument = (XTextDocument) UnoRuntime
			.queryInterface(XTextDocument.class, xComp);

	xReplaceable = (XReplaceable) UnoRuntime
			.queryInterface(XReplaceable.class,
					xTextDocument);

	xReplaceDescr = (XReplaceDescriptor) xReplaceable
			.createReplaceDescriptor();

	Set<Entry<String, String>> textSets = dataParamMap.entrySet();
	for(Entry<String, String> textSet:textSets){
		xReplaceDescr.setSearchString("<"+textSet.getKey()+">");
		xReplaceDescr.setReplaceString(textSet.getValue());
		xReplaceable.replaceAll(xReplaceDescr);
	}
	
	
	// save as a PDF 
	XStorable xStorable = (XStorable) UnoRuntime
			.queryInterface(XStorable.class, xComp);

	propertyValues = new PropertyValue[2];
	// Setting the flag for overwriting
	propertyValues[0] = new PropertyValue();
	propertyValues[0].Name = "Overwrite";
	propertyValues[0].Value = new Boolean(true);
	// Setting the filter name
	propertyValues[1] = new PropertyValue();
	propertyValues[1].Name = "FilterName";
	propertyValues[1].Value = "writer_pdf_Export";

	// Appending the favoured extension to the origin document name
	xStorable.storeToURL("file:///" + savePdfPath, propertyValues);

	System.out.println("Saved " + savePdfPath);


	
	// shutdown
	xDesktop.terminate();

			   
	}

}
