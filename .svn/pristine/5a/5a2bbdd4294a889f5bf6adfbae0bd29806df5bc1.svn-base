package com.zts.robot.util;

import java.io.ByteArrayOutputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import com.itextpdf.text.Document;
import com.itextpdf.text.DocumentException;
import com.itextpdf.text.Element;
import com.itextpdf.text.Font;
import com.itextpdf.text.Paragraph;
import com.itextpdf.text.Rectangle;
import com.itextpdf.text.pdf.AcroFields;
import com.itextpdf.text.pdf.BaseFont;
import com.itextpdf.text.pdf.PdfContentByte;
import com.itextpdf.text.pdf.PdfCopy;
import com.itextpdf.text.pdf.PdfImportedPage;
import com.itextpdf.text.pdf.PdfPCell;
import com.itextpdf.text.pdf.PdfPTable;
import com.itextpdf.text.pdf.PdfReader;
import com.itextpdf.text.pdf.PdfStamper;

public class Snippet {
	 public static void fillTemplate() {  
	        // 模板路径  
	        String templatePath = "D:/pdf/获奖证书模板V4.0表单.pdf";  
	        // 生成的新文件路径  
	        String newPDFPath = "D:/pdf/ceshi.pdf";  
	        BaseFont fzcsjtChinese = null;
			try {
				fzcsjtChinese = BaseFont.createFont("C:/Windows/Fonts/simhei.ttf",BaseFont.IDENTITY_H,BaseFont.EMBEDDED);
			} catch (DocumentException e1) {
				// TODO 自动生成的 catch 块
				e1.printStackTrace();
			} catch (IOException e1) {
				// TODO 自动生成的 catch 块
				e1.printStackTrace();
			}
	        PdfReader reader;
	        FileOutputStream out;  
	        ByteArrayOutputStream bos;  
	        PdfStamper stamper;  
	        try {  
	            out = new FileOutputStream(newPDFPath);// 输出流  
	            reader = new PdfReader(templatePath);// 读取pdf模板  
	            bos = new ByteArrayOutputStream();  
	            stamper = new PdfStamper(reader, bos);
	            
	            AcroFields form = stamper.getAcroFields();
	            
	            Map<String, Object> data = new HashMap<String, Object>();
	            data.put("编号", "编号："+"138173217131");
	            data.put("学校队伍", "beijingdaxue  xuexiaodeduiwu");
	            data.put("小项", "saishidexiaoxiang");
	            data.put("奖项", "sidengjiang");
	            data.put("教师", "秦志鹏00，秦志鹏01，秦志鹏02，秦志鹏03,秦志鹏04，秦志鹏05，秦志鹏06");
	            data.put("队员", "陈野00，陈野01，陈野02，陈野03，陈野04，陈野05，陈野06，陈野07，陈野08");
	           
	            
	            
	            PdfContentByte pcb = stamper.getOverContent(1);
				//获取表单域坐标
				List<AcroFields.FieldPosition> list = form.getFieldPositions("成员");  
	            Rectangle rect = list.get(0).position;
	            //创建PDF表格
	            PdfPTable table = new PdfPTable(2);
	            float tatalWidth = rect.getRight() - rect.getLeft() - 1;  
	            //计算表格宽度
	            float[] columnWidth ={(float) (tatalWidth*0.17),(float)(tatalWidth*0.83)};
	            table.setTotalWidth(columnWidth);
	            
	            Font FontProve = new Font(fzcsjtChinese, 15, 0);
	            Paragraph p11 = new Paragraph("指导教师：", FontProve);
	            Paragraph p12 = new Paragraph((String) data.get("教师"), FontProve);
	            Paragraph p21 = new Paragraph("队    员：", FontProve);
	            Paragraph p22 = new Paragraph((String) data.get("队员"), FontProve);
	            
	            PdfPCell cell11 = new PdfPCell(p11);
	            //cell11.setFixedHeight(rect.getTop() - rect.getBottom() - 1);  
	            cell11.setBorderWidth(0);  
	            cell11.setVerticalAlignment(Element.ALIGN_LEFT);  
	            cell11.setHorizontalAlignment(Element.ALIGN_LEFT);  
	            cell11.setLeading(0, (float) 1.4);
	            table.addCell(cell11);
	            
	            PdfPCell cell12 = new PdfPCell(p12);
	            //cell12.setFixedHeight(rect.getTop() - rect.getBottom() - 1);  
	            cell12.setBorderWidth(0);  
	            cell12.setVerticalAlignment(Element.ALIGN_LEFT);  
	            cell12.setHorizontalAlignment(Element.ALIGN_LEFT);  
	            cell12.setLeading(0, (float) 1.4);
	            table.addCell(cell12);
	            
	            PdfPCell cell21 = new PdfPCell(p21);
	            //cell11.setFixedHeight(rect.getTop() - rect.getBottom() - 1);  
	            cell21.setBorderWidth(0);  
	            cell21.setVerticalAlignment(Element.ALIGN_LEFT);  
	            cell21.setHorizontalAlignment(Element.ALIGN_LEFT);  
	            cell21.setLeading(0, (float) 1.4);
	            table.addCell(cell21);
	            
	            PdfPCell cell22 = new PdfPCell(p22);
	            //cell12.setFixedHeight(rect.getTop() - rect.getBottom() - 1);  
	            cell22.setBorderWidth(0);  
	            cell22.setVerticalAlignment(Element.ALIGN_LEFT);  
	            cell22.setHorizontalAlignment(Element.ALIGN_LEFT);  
	            cell22.setLeading(0, (float) 1.4);
	            table.addCell(cell22);
	            
	            table.writeSelectedRows(0, -1, rect.getLeft(), rect.getTop(), pcb);          
	            
	            for (String key : data.keySet()) {	            	
                    form.setField(key,data.get(key).toString());
	            }
	            form.setField("成员", "");
	            stamper.setFormFlattening(true);// 如果为false那么生成的PDF文件还能编辑，一定要设为true  
	            stamper.close();  
	  
	            Document doc = new Document();  
	            PdfCopy copy = new PdfCopy(doc, out);  
	            doc.open();  
	            PdfImportedPage importPage = copy.getImportedPage(new PdfReader(bos.toByteArray()), 1);  
	            copy.addPage(importPage);
	            doc.close();  
	  
	        } catch (IOException e) {  
	            System.out.println(1);
	            e.printStackTrace();
	        } catch (DocumentException e) {  
	            System.out.println(2);  
	            e.printStackTrace();
	        }  
	  
	    }  
	 
	 
	 
		public static void formFdfModeForPdf(Map<String, String> dataParamMap,String savePdfPath,String wordModelPathCup) {
			PdfReader reader;
	        FileOutputStream out;  
	        ByteArrayOutputStream bos;  
	        PdfStamper stamper;
	        try {
	        	 out = new FileOutputStream(savePdfPath);// 输出流  
	             reader = new PdfReader(wordModelPathCup);// 读取pdf模板  
	             bos = new ByteArrayOutputStream();  
	             stamper = new PdfStamper(reader, bos);  
	             AcroFields form = stamper.getAcroFields(); 
	             for (String key : dataParamMap.keySet()) {
		            	
	                    form.setField(key,dataParamMap.get(key).toString());
		            }
	             	stamper.setFormFlattening(true);// 如果为false那么生成的PDF文件还能编辑，一定要设为true  
		            stamper.close();  
		  
		            Document doc = new Document();  
		            PdfCopy copy = new PdfCopy(doc, out);  
		            doc.open();  
		            PdfImportedPage importPage = copy.getImportedPage(new PdfReader(bos.toByteArray()), 1);  
		            copy.addPage(importPage);  
		            doc.close();
			} catch (Exception e) {
				System.out.println("生成失败！");
				e.printStackTrace();
			}	       
		}
		public static void replaceFormFdfModeForPdf(Map<String, String> dataParamMap,String savePdfPath,String wordModelPathCup) {
			PdfReader reader;
	        FileOutputStream out;  
	        ByteArrayOutputStream bos;  
	        PdfStamper stamper;
	        try {
	        	 out = new FileOutputStream(savePdfPath);// 输出流  
	             reader = new PdfReader(wordModelPathCup);// 读取pdf模板  
	             bos = new ByteArrayOutputStream();  
	             stamper = new PdfStamper(reader, bos);  
	             AcroFields form = stamper.getAcroFields(); 
	             String prove = form.getField("证明");
	             for(String key : dataParamMap.keySet()){
	            	 prove.replace("<"+key+">", dataParamMap.get(key).toString());
	             }
	             	
		            	
	              form.setField("编号",dataParamMap.get("编号").toString());
		            
	             	stamper.setFormFlattening(true);// 如果为false那么生成的PDF文件还能编辑，一定要设为true  
		            stamper.close();  
		  
		            Document doc = new Document();  
		            PdfCopy copy = new PdfCopy(doc, out);  
		            doc.open();  
		            PdfImportedPage importPage = copy.getImportedPage(new PdfReader(bos.toByteArray()), 1);  
		            copy.addPage(importPage);  
		            doc.close();
			} catch (Exception e) {
				System.out.println("生成失败！");
				e.printStackTrace();
			}	       
		}
		
	 	/**
	 	 * 文本换行添加行首
	 	 * @param text 文本
	 	 * @param lineNum 行内字数
	 	 * @param lineHead 行首填充字符
	 	 * @return
	 	 */
	  	public static String lineFeed(String text,int lineNum,String lineHead) {
	  		String linetext="";
	  		int rowsNum=text.length()/lineNum+1;
	  		for(int i=0;i<rowsNum;i++){
            	if(text.length()<lineNum){
            		linetext+=text;
            	}else{
            		linetext+=text.substring(0, lineNum)+lineHead;
            		text = text.substring(lineNum);
            	}            	
            }
			return linetext;			
		}
	    public static void main(String[] args) {  
	        fillTemplate();  
	    }  
}
